geom_tiplab(angle = 10, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
```
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 10, hjust = -1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 10, hjust = -1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
```
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 10, hjust = -0.1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Function to calculate the maximum label length in plot units
calculate_label_length <- function(labels, fontsize = 3) {
max_label_length <- max(nchar(labels))
# Estimate the width required for the longest label
max_label_length * fontsize * 0.4
}
# Read your tree file (replace 'your_tree_file' with the actual file name)
tree <- read.tree("your_tree_file")
# Function to calculate the maximum label length in plot units
calculate_label_length <- function(labels, fontsize = 3) {
max_label_length <- max(nchar(labels))
# Estimate the width required for the longest label
max_label_length * fontsize * 0.4
}
# Root the tree at the midpoint
midpoint_tree <- midpoint(tree)
# Shorten branch lengths by setting a maximum branch length
max_branch_length <- 0.5  # Adjust this value to set the maximum branch length
midpoint_tree$edge.length <- pmin(midpoint_tree$edge.length, max_branch_length)
# Calculate the required x-axis limit
longest_label_length <- calculate_label_length(midpoint_tree$tip.label)
x_limit <- max(midpoint_tree$edge.length) + longest_label_length
# Plot the tree with adjusted branch lengths and x-axis limits
p <- ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
xlim(0, x_limit) +  # Set x-axis limits to fit labels
theme(aspect.ratio = 1) +
theme(plot.margin = unit(c(1, 4, 1, 1), "lines"))  # Increase the right margin
print(p)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
MRCA(midpoint_tree, tip=c("220", "200"))
MRCA(tree, tip=c("220", "200"))
# Load the tree from the .contree file
tree <- read.tree("tree/EpiVir_IQTree_2024july9/EpiVir_16S.treefile")
midpoint_tree <- midpoint(tree)
# Shorten branch lengths by setting a maximum branch length
max_branch_length <- 0.1  # Adjust this value to set the maximum branch length
midpoint_tree$edge.length <- pmin(midpoint_tree$edge.length, max_branch_length)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5, linesize = 0.1) +
geom_tippoint()
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5, linesize = 3) +
geom_tippoint()
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint()
xlim(1990, 2020)
xlim(0, 2020)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 2020)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 10)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.01)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.09)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.07)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.05)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.09)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.075)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.08)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.9)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.09)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, angle = 20, hjust = -0.05, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, angle = 20, hjust = -0.01, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, angle = 20, hjust = -0.05, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, angle = 20, hjust = -0.1) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, hjust = -0.1) +
geom_tippoint() +
xlim(0, 0.1)
knitr::opts_chunk$set(echo = TRUE, tidy.opts = list, tidy = TRUE, fig.align = "center", fig.height = 5,
fig.path = "../figures/", # Send any figures to this folder
dev = "png",  # Export figures as PNG
dpi = 300) # Set the resolution to 300 dots per inch (dpi)
knit_with_parameters("~/Desktop/Cornell/Hendry Lab/pseud_epi_growth/analysis/epi_vir_analysis.Rmd")
# Load the tree from the .contree file
tree <- read.tree("tree/EpiVir_IQTree_2024july9/EpiVir_16S.contree")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, tidy.opts = list, tidy = TRUE, fig.align = "center", # Always relative to the document directory
fig.path = "../figures/", # Send any figures to this folder
dev = "png",  # Export figures as PNG
dpi = 350)  # Set the resolution to 300 dots per inch (dpi)
# Chunk 2: load-packages
pacman::p_load(ggplot2, readxl, BiocManager, RColorBrewer, paletteer, aplot, ggbeeswarm, dplyr, tidyverse, devtools, emmeans, cowplot, phangorn, knitr, survival, here, tibble, survminer, lubridate, formatR, gridExtra, ggsurvfit, ggtree, treeio, gtsummary, phytools, tidycmprsk, install = FALSE)
# Chunk 3: load-data
# Define the desired order of the treatments
strains_order <- c("194", "200", "204", "205", "215", "216", "220", "221", "227", "228", "B728a", "Cit7", "pisi", "Control")
strains_df <- read_excel("data/strains_R.xlsx")
epi_growth_data <- read_excel("data/pseud_epi_growth_2024summer_R.xlsx")
# Convert the strain variable to a factor with the specified order
epi_growth_data$treatment <- factor(epi_growth_data$treatment, levels = strains_order)
# Join the strains dataframe to epi growth
epi_growth_data <- left_join(epi_growth_data, strains_df, by = "treatment")
# Load virulence data
aphid_virulence_data <- read_csv("data/virulence_new_all.csv")
# Convert the treatment variable to a factor with the specified order
aphid_virulence_data$treatment <- factor(aphid_virulence_data$treatment, levels = strains_order)
# Join the strains dataframe to virulence
aphid_virulence_data <- left_join(aphid_virulence_data, strains_df, by = "treatment")
# Set a seed for this analysis
set.seed(03132001)
# Chunk 4: colors
# Extract the default ggplot colors
default_colors <- scales::hue_pal()(length(strains_order) - 1)
# Create a named vector for strain colors, ensuring "Control" is black
strain_colors <- setNames(c(default_colors, "black"), strains_order)
# Load species colors
species_colors <- c(
"P. fluorescens" = "dodgerblue2",
"P. syringae" = "springgreen3",
"P. putida" = "sienna4",
"Control" = "black")
species_colors_manual <- c("194" = "sienna4",
"200" = "dodgerblue2",
"204" = "dodgerblue2",
"205" = "dodgerblue2",
"215" = "springgreen3",
"216" = "dodgerblue2",
"220" = "sienna4",
"221" = "dodgerblue2",
"227" = "dodgerblue2",
"228" = "dodgerblue2",
"B728a" = "springgreen3",
"Cit7" = "springgreen3",
"pisi" = "springgreen3",
"Control" = "black")
# Chunk 5: survival-model
# Fit the survival model
km_fit <- survfit(Surv(time, censored) ~ treatment, data = aphid_virulence_data)
# Chunk 6: test-survival
# Fit the survival model
km_fit <- survfit(Surv(time, censored) ~ treatment, data = aphid_virulence_data)
# Extract survival probabilities at specific time points
time_points <- c(72)
km_summary <- summary(km_fit, times = time_points)
# Calculate standard error (assuming fit includes the necessary information)
std_error <- summary(km_fit, times = time_points)$std.err
# Initialize empty lists to store the results
times_list <- list()
treatment_list <- list()
surv_prob_list <- list()
std_error_list <- list()
# Loop over each treatment group and extract survival probabilities at specified time points
for (i in 1:length(km_fit$strata)) {
treatment_name <- names(km_fit$strata)[i]
for (t in time_points) {
idx <- which(km_summary$time == t & km_summary$strata == treatment_name)
if (length(idx) > 0) {
times_list <- c(times_list, t)
treatment_list <- c(treatment_list, treatment_name)
surv_prob_list <- c(surv_prob_list, km_summary$surv[idx])
std_error_list <- c(std_error_list, km_summary$std.err[idx])
} else {
times_list <- c(times_list, t)
treatment_list <- c(treatment_list, treatment_name)
surv_prob_list <- c(surv_prob_list, NA)
std_error_list <- c(std_error_list, NA)
}
}
}
# Create the data frame
surv_probs <- data.frame(
time = unlist(times_list),
treatment = unlist(treatment_list),
surv_prob = unlist(surv_prob_list),
std_error_data = unlist(std_error_list)
)
# Replace "treatment=" with an empty string
surv_probs$treatment <- gsub("treatment=", "", surv_probs$treatment)
# Convert the treatment variable to a factor with the specified order
surv_probs$treatment <- factor(surv_probs$treatment, levels = strains_order)
# Join the survival dataframe to strains
surv_probs <- left_join(surv_probs, strains_df, by = "treatment")
# Print the data frame
print(surv_probs)
# Chunk 7: post-hoc
# Perform pairwise log-rank tests between treatment groups and the control group
pairwise_tests_treatment <- pairwise_survdiff(Surv(time, censored) ~ treatment, data = aphid_virulence_data)
# Print the pairwise tests
print(pairwise_tests_treatment)
# Perform pairwise log-rank tests between species_complex groups and the control group
pairwise_tests_species <- pairwise_survdiff(Surv(time, censored) ~ species_complex, data = aphid_virulence_data)
# Print the pairwise tests
print(pairwise_tests_species)
# Chunk 8: surival-barplot
surv_plot <- ggplot(data = surv_probs, aes(x = treatment, y = (1-surv_prob), color = species_complex, fill = species_complex, alpha = 0.95)) +
geom_col() +
geom_errorbar(aes(ymin = (1-surv_prob) - std_error_data, ymax = (1-surv_prob) + std_error_data),
width = 0.3,  # Width of error bars
position = position_dodge(width = 0.9)) +  # Dodge bars slightly
labs(x = "-80 Strain #",
y = "Aphid Mortality at 72 Hours (%)") +
theme_minimal() +
coord_flip() +
scale_fill_manual(values = species_colors) +
scale_color_manual(values = species_colors) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "bottom")
surv_plot
# Chunk 9: Kaplan-Meier
# Plot the Kaplan-Meier survival curves by treatment
surv_curv_treatment <- survfit2(Surv(time, censored) ~ treatment, data = aphid_virulence_data) %>%
ggsurvfit(type = "survival") +
labs(
x = "Hours",
y = "Overall survival probability"
) +
theme_minimal() +
scale_fill_manual(values = species_colors_manual) +
scale_color_manual(values = species_colors_manual) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right")
# Plot the Kaplan-Meier survival curves by species complex
surv_curv_species <- survfit2(Surv(time, censored) ~ species_complex, data = aphid_virulence_data) %>%
ggsurvfit(type = "survival") +
labs(
x = "Hours",
y = "Overall survival probability"
) +
theme_minimal() +
scale_fill_manual(values = species_colors) +
scale_color_manual(values = species_colors) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right")
#show plots
surv_curv_treatment
surv_curv_species
# Chunk 10: mean-epi-growth
# Replace NA with a lower value or remove them for visualization
# Remove rows with NA in CFU_per_10_leafdiscs_log_10
epi_growth_clean <- epi_growth_data %>%
filter(!is.na(CFU_per_10_leafdiscs_log_10))
# Convert CFU_per_10_leafdiscs_log_10 to numeric, handling scientific notation
epi_growth_clean$CFU_per_10_leafdiscs_log_10 <- as.numeric(gsub("<", "", epi_growth_clean$CFU_per_10_leafdiscs_log_10))
# Subset data to remove unfinished strains and extract the letter part from the 'plant_rep' column
epi_growth_clean <- epi_growth_clean %>%
mutate(plant_rep_letter = substr(plant_rep, 1, 1))
# Calculate the mean and SD CFU per strain for each plant rep letter and retain the specified columns
epi_growth_mean_per_rep <- epi_growth_clean %>%
group_by(treatment, plant_rep_letter) %>%
summarise(
CFU_per_10_leafdiscs_log_10 = mean(CFU_per_10_leafdiscs_log_10, na.rm = TRUE),
sd_CFU = sd(CFU_per_10_leafdiscs_log_10, na.rm = TRUE),
sample = first(sample),
person = first(person),
species_complex = first(species_complex),
block = first(block),
treatment = first(treatment),
plant_rep = first(plant_rep),
.groups = 'drop'
)
# Calculate the mean and SD CFU per strain for each plant rep letter and retain the specified columns
epi_growth_mean_per_strain <- epi_growth_clean %>%
group_by(treatment) %>%
summarise(
CFU_per_10_leafdiscs_log_10 = mean(CFU_per_10_leafdiscs_log_10, na.rm = TRUE),
sd_CFU = sd(CFU_per_10_leafdiscs_log_10, na.rm = TRUE),
sample = first(sample),
person = first(person),
species_complex = first(species_complex),
block = first(block),
treatment = first(treatment),
plant_rep = first(plant_rep),
.groups = 'drop'
)
epi_growth_mean_per_strain
# Chunk 11: epi-growth
# plot by treatment
epi_growth_treatment <- ggplot(data = epi_growth_mean_per_rep,
aes(x = treatment,
y = CFU_per_10_leafdiscs_log_10,
color = species_complex,
fill = species_complex)) +
geom_boxplot(outlier.shape = NA, alpha = 0.3) +
geom_beeswarm(stroke = 0.5, size = 0.8, alpha = 0.8) +
theme_minimal() +
coord_flip() +
scale_fill_manual(values = species_colors) +
scale_color_manual(values = species_colors) +
scale_y_continuous(limits = c(2.5, 5.5)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
# plot by species complex
epi_growth_species <- ggplot(data = epi_growth_mean_per_rep,
aes(x = species_complex,
y = CFU_per_10_leafdiscs_log_10,
color = species_complex,
fill = species_complex)) +
geom_boxplot(outlier.shape = NA, alpha = 0.3) +
geom_beeswarm(stroke = 0.5, size = 0.8, alpha = 0.8) +
theme_minimal() +
scale_fill_manual(values = species_colors) +
scale_color_manual(values = species_colors) +
scale_y_continuous(limits = c(2.5, 5.5)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
# show plots
epi_growth_treatment
epi_growth_species
# Chunk 12: epi-growth-stats
# stats per treatment
epi_growth_mod_treatment = lm(CFU_per_10_leafdiscs_log_10 ~ treatment, data = epi_growth_mean_per_rep)
emmeans(epi_growth_mod_treatment, pairwise ~ treatment)
hist(resid(epi_growth_mod_treatment))
# stats per species
epi_growth_mod_species = lm(CFU_per_10_leafdiscs_log_10 ~ species_complex, data = epi_growth_mean_per_rep)
emmeans(epi_growth_mod_species, pairwise ~ species_complex)
hist(resid(epi_growth_mod_species))
# Chunk 13: combine-epi-virulence
# Combine strain_stats and surv_probs using left_join
epi_virulence_data <- left_join(epi_growth_mean_per_strain, surv_probs, by = "treatment")
# Print the combined data
print(epi_virulence_data)
# Calculate correlation coefficient between survival probability and epiphytic growth ability
correlation <- -1*cor(epi_virulence_data$surv_prob, epi_virulence_data$CFU_per_10_leafdiscs_log_10, method = "pearson")
# Chunk 14: epi-virulence-plot
# Create scatter plot for 72 hours
epi_virulence_plot_strains <- ggplot(epi_virulence_data, aes(x = CFU_per_10_leafdiscs_log_10, y = 1-surv_prob)) +
geom_point(aes(color = species_complex.y)) +
geom_smooth(method = "lm", se = TRUE, color = "black", fill = "black", alpha = 0.15, linewidth = 0.5) +
labs(x = "Mean CFU per 10 Leaf Discs (Log Transformed)",
y = "Aphid Mortality at 72 Hours (%)",
caption = paste("Pearson's Correlation Coefficient:", round(correlation, 2))) +
scale_x_continuous(limits = c(2.5, 5.5)) +
scale_fill_manual(values = species_colors) +
scale_color_manual(values = species_colors) +
theme_minimal()
epi_virulence_plot_strains
# Load the tree from the .contree file
tree <- read.tree("tree/EpiVir_IQTree_2024july9/EpiVir_16S.contree")
# Root the tree at the midpoint
midpoint_tree <- midpoint(tree)
# Visualize the tree with customizations
phylo_tree <- ggtree(midpoint_tree) +
geom_tiplab(color = "purple", hjust = -0.3, align=TRUE) +
geom_tippoint() #+
phylo_tree
# Visualize the tree with customizations
phylo_tree <- ggtree(midpoint_tree) +
geom_tiplab(color = "purple", hjust = -0.3, align=TRUE) +
geom_tippoint() +
xlim(0, 1)
phylo_tree
# Visualize the tree with customizations
phylo_tree <- ggtree(midpoint_tree) +
geom_tiplab(color = "purple", hjust = -0.3, align=TRUE) +
geom_tippoint() +
xlim(0, 0.9)
phylo_tree
# Visualize the tree with customizations
phylo_tree <- ggtree(midpoint_tree) +
geom_tiplab(size = 3, hjust = -0.3, align=TRUE) +
geom_tippoint() +
xlim(0, 0.9)
phylo_tree
# Visualize the tree with customizations
phylo_tree <- ggtree(midpoint_tree) +
geom_tiplab(size = 3, hjust = -0.1, align=TRUE) +
geom_tippoint() +
xlim(0, 0.9)
phylo_tree
# Visualize the tree with customizations
phylo_tree <- ggtree(midpoint_tree) +
geom_tiplab(size = 3, hjust = -0.1, align=TRUE) +
geom_tippoint() +
xlim(0, 0.5)
phylo_tree
# Visualize the tree with customizations
phylo_tree <- ggtree(midpoint_tree) +
geom_tiplab(size = 3, hjust = -0.1, align=TRUE) +
geom_tippoint() +
xlim(0, 0.09)
phylo_tree
