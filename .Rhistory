dpi = 300)  # Set the resolution to 300 dots per inch (dpi)
# Chunk 2: load-packages
pacman::p_load(ggplot2, readxl, RColorBrewer, paletteer, viridis, wesanderson, ggbeeswarm, dplyr, tidyverse, devtools, emmeans, cowplot, knitr, survival, here, tibble, survminer, lubridate, formatR, gridExtra, ggsurvfit, gtsummary, tidycmprsk, install = FALSE)
# Chunk 3: colors
# Define the desired order of the treatments
strains <- c("194", "200", "204", "205", "215", "216", "220", "221", "227", "228", "B728a", "Cit7", "pisi", "Control")
# Convert the strain variable to a factor with the specified order
pseud_epi_growth_2024summer_R$strain <- factor(pseud_epi_growth_2024summer_R$strain, levels = strains)
# Extract the default ggplot colors
default_colors <- scales::hue_pal()(length(strains) - 1)
# Create a named vector for strain colors, ensuring "Control" is black
strain_colors <- setNames(c(default_colors, "black"), strains)
# Load species colors
species_colors <- c(
"P. fluorescens" = "dodgerblue2",
"P. syringae" = "springgreen3",
"P. paralactis" = "sienna4")
# Chunk 4: load-data
pseud_epi_growth_2024summer_R <- read_excel("data/pseud_epi_growth_2024summer_R.xlsx")
# Define the desired order of the treatments
desired_order <- c("194", "200", "204", "205", "215", "216", "220", "221", "227", "228", "B728a", "Cit7", "pisi", "Control")
# Convert the treatment variable to a factor with the specified order
pseud_epi_growth_2024summer_R$strain <- factor(pseud_epi_growth_2024summer_R$strain, levels = desired_order)
aphid_virulence_data <- read_csv("data/virulence_new_all.csv")
# Convert the treatment variable to a factor with the specified order
aphid_virulence_data$treatment <- factor(aphid_virulence_data$treatment, levels = desired_order)
# Chunk 5: test-survival
# Fit the survival model
km_fit <- survfit(Surv(time, censored) ~ treatment, data = aphid_virulence_data)
# Extract survival probabilities at specific time points
time_points <- c(24, 48, 72)
km_summary <- summary(km_fit, times = time_points)
# Initialize empty lists to store the results
times_list <- list()
treatment_list <- list()
surv_prob_list <- list()
# Loop over each treatment group and extract survival probabilities at specified time points
for (i in 1:length(km_fit$strata)) {
treatment_name <- names(km_fit$strata)[i]
for (t in time_points) {
idx <- which(km_summary$time == t & km_summary$strata == treatment_name)
if (length(idx) > 0) {
times_list <- c(times_list, t)
treatment_list <- c(treatment_list, treatment_name)
surv_prob_list <- c(surv_prob_list, km_summary$surv[idx])
} else {
times_list <- c(times_list, t)
treatment_list <- c(treatment_list, treatment_name)
surv_prob_list <- c(surv_prob_list, NA)
}
}
}
# Create the data frame
surv_probs <- data.frame(
time = unlist(times_list),
treatment = unlist(treatment_list),
surv_prob = unlist(surv_prob_list)
)
# Replace "treatment=" with an empty string
surv_probs$treatment <- gsub("treatment=", "", surv_probs$treatment)
# Print the data frame
print(surv_probs)
# subset data by time
surv_probs_72 <- surv_probs %>% filter(time == 72)
# Convert the treatment variable to a factor with the specified order
surv_probs_72$treatment <- factor(surv_probs_72$treatment, levels = desired_order)
# If you need to save it to a file, you can use the following command
# write.csv(surv_probs, "survival_probabilities.csv", row.names = FALSE)
# Chunk 6: post-hoc
# Perform pairwise log-rank tests between treatment groups and the control group
pairwise_tests <- pairwise_survdiff(Surv(time, censored) ~ treatment, data = aphid_virulence_data)
# Print the pairwise tests
print(pairwise_tests)
# Chunk 7: surival-barplot
surv_plot_72 <- ggplot(data = surv_probs_72, aes(x = treatment, y = (1-surv_prob), color = treatment, fill = treatment)) +
geom_col() +
labs(title = "72 hours",
x = "-80 Strain #",
y = "Aphid Mortality at 72 Hours (%)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
scale_fill_manual(values = strain_colors) +
scale_color_manual(values = strain_colors)
surv_plot_72
# Chunk 8: Kaplan-Meier
survfit2(Surv(time, censored) ~ treatment, data = aphid_virulence_data) %>%
ggsurvfit() +
labs(
x = "Hours",
y = "Overall survival probability"
)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, tidy.opts = list, tidy = TRUE, fig.align = "center", # Always relative to the document directory
fig.path = "../figures/", # Send any figures to this folder
dev = "png",  # Export figures as PNG
dpi = 300)  # Set the resolution to 300 dots per inch (dpi)
# Chunk 2: load-packages
pacman::p_load(ggplot2, readxl, RColorBrewer, paletteer, viridis, wesanderson, ggbeeswarm, dplyr, tidyverse, devtools, emmeans, cowplot, knitr, survival, here, tibble, survminer, lubridate, formatR, gridExtra, ggsurvfit, gtsummary, tidycmprsk, install = FALSE)
# Chunk 3: colors
# Define the desired order of the treatments
strains <- c("194", "200", "204", "205", "215", "216", "220", "221", "227", "228", "B728a", "Cit7", "pisi", "Control")
# Convert the strain variable to a factor with the specified order
pseud_epi_growth_2024summer_R$strain <- factor(pseud_epi_growth_2024summer_R$strain, levels = strains)
# Extract the default ggplot colors
default_colors <- scales::hue_pal()(length(strains) - 1)
# Create a named vector for strain colors, ensuring "Control" is black
strain_colors <- setNames(c(default_colors, "black"), strains)
# Load species colors
species_colors <- c(
"P. fluorescens" = "dodgerblue2",
"P. syringae" = "springgreen3",
"P. paralactis" = "sienna4")
# Chunk 4: load-data
pseud_epi_growth_2024summer_R <- read_excel("data/pseud_epi_growth_2024summer_R.xlsx")
# Define the desired order of the treatments
desired_order <- c("194", "200", "204", "205", "215", "216", "220", "221", "227", "228", "B728a", "Cit7", "pisi", "Control")
# Convert the treatment variable to a factor with the specified order
pseud_epi_growth_2024summer_R$strain <- factor(pseud_epi_growth_2024summer_R$strain, levels = desired_order)
aphid_virulence_data <- read_csv("data/virulence_new_all.csv")
# Convert the treatment variable to a factor with the specified order
aphid_virulence_data$treatment <- factor(aphid_virulence_data$treatment, levels = desired_order)
# Chunk 5: test-survival
# Fit the survival model
km_fit <- survfit(Surv(time, censored) ~ treatment, data = aphid_virulence_data)
# Extract survival probabilities at specific time points
time_points <- c(24, 48, 72)
km_summary <- summary(km_fit, times = time_points)
# Initialize empty lists to store the results
times_list <- list()
treatment_list <- list()
surv_prob_list <- list()
# Loop over each treatment group and extract survival probabilities at specified time points
for (i in 1:length(km_fit$strata)) {
treatment_name <- names(km_fit$strata)[i]
for (t in time_points) {
idx <- which(km_summary$time == t & km_summary$strata == treatment_name)
if (length(idx) > 0) {
times_list <- c(times_list, t)
treatment_list <- c(treatment_list, treatment_name)
surv_prob_list <- c(surv_prob_list, km_summary$surv[idx])
} else {
times_list <- c(times_list, t)
treatment_list <- c(treatment_list, treatment_name)
surv_prob_list <- c(surv_prob_list, NA)
}
}
}
# Create the data frame
surv_probs <- data.frame(
time = unlist(times_list),
treatment = unlist(treatment_list),
surv_prob = unlist(surv_prob_list)
)
# Replace "treatment=" with an empty string
surv_probs$treatment <- gsub("treatment=", "", surv_probs$treatment)
# Print the data frame
print(surv_probs)
# subset data by time
surv_probs_72 <- surv_probs %>% filter(time == 72)
# Convert the treatment variable to a factor with the specified order
surv_probs_72$treatment <- factor(surv_probs_72$treatment, levels = desired_order)
# If you need to save it to a file, you can use the following command
# write.csv(surv_probs, "survival_probabilities.csv", row.names = FALSE)
# Chunk 6: post-hoc
# Perform pairwise log-rank tests between treatment groups and the control group
pairwise_tests <- pairwise_survdiff(Surv(time, censored) ~ treatment, data = aphid_virulence_data)
# Print the pairwise tests
print(pairwise_tests)
# Chunk 7: surival-barplot
surv_plot_72 <- ggplot(data = surv_probs_72, aes(x = treatment, y = (1-surv_prob), color = treatment, fill = treatment)) +
geom_col() +
labs(title = "72 hours",
x = "-80 Strain #",
y = "Aphid Mortality at 72 Hours (%)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
scale_fill_manual(values = strain_colors) +
scale_color_manual(values = strain_colors)
surv_plot_72
# Chunk 8: Kaplan-Meier
survfit2(Surv(time, censored) ~ treatment, data = aphid_virulence_data) %>%
ggsurvfit() +
labs(
x = "Hours",
y = "Overall survival probability"
)
# Chunk 9: mean-epi-growth
# Replace NA with a lower value or remove them for visualization
# Remove rows with NA in CFU_per_10_leafdiscs
epi_growth_clean <- pseud_epi_growth_2024summer_R %>%
filter(!is.na(CFU_per_10_leafdiscs))
# Convert CFU_per_10_leafdiscs to numeric, handling scientific notation
epi_growth_clean$CFU_per_10_leafdiscs <- as.numeric(gsub("<", "", epi_growth_clean$CFU_per_10_leafdiscs))
# Subset data to remove unfinished strains and extract the letter part from the 'plant_rep' column
epi_growth_clean <- epi_growth_clean %>%
mutate(plant_rep_letter = substr(plant_rep, 1, 1))
# Calculate the mean and SD CFU per strain for each plant rep letter and retain the specified columns
epi_growth_mean_per_rep <- epi_growth_clean %>%
group_by(strain, plant_rep_letter) %>%
summarise(
mean_CFU_per_10_leafdiscs = mean(CFU_per_10_leafdiscs, na.rm = TRUE),
sd_CFU = sd(CFU_per_10_leafdiscs, na.rm = TRUE),
sample = first(sample),
person = first(person),
block = first(block),
species = first(species),
plant_rep = first(plant_rep),
.groups = 'drop'
)
# Calculate the mean and SD CFU per strain for each plant rep letter and retain the specified columns
epi_growth_mean_per_strain <- epi_growth_clean %>%
group_by(strain) %>%
summarise(
mean_CFU_per_10_leafdiscs = mean(CFU_per_10_leafdiscs, na.rm = TRUE),
sd_CFU = sd(CFU_per_10_leafdiscs, na.rm = TRUE),
sample = first(sample),
person = first(person),
block = first(block),
species = first(species),
plant_rep = first(plant_rep),
.groups = 'drop'
)
epi_growth_mean_per_strain
epi_growth_strain <- ggplot(data = epi_growth_mean_per_rep, aes(x = strain, y = mean_CFU_per_10_leafdiscs, color = strain, fill = strain)) +
geom_boxplot(outlier.shape = NA, alpha = 0.3) +
geom_beeswarm(stroke = 0.5, size = 0.8, alpha = 0.8) +
labs(title = "CFU per 10 Leaf Discs Across Samples",
x = "-80 Strain #",
y = "CFU per 10 Leaf Discs (Log10 Transformed)") +
theme_minimal() +
scale_y_log10() +  # Apply log transformation to y-axis
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
epi_growth_strain
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, tidy.opts = list, tidy = TRUE, fig.align = "center", # Always relative to the document directory
fig.path = "../figures/", # Send any figures to this folder
dev = "png",  # Export figures as PNG
dpi = 300)  # Set the resolution to 300 dots per inch (dpi)
# Chunk 2: load-packages
pacman::p_load(ggplot2, readxl, RColorBrewer, paletteer, viridis, wesanderson, ggbeeswarm, dplyr, tidyverse, devtools, emmeans, cowplot, knitr, survival, here, tibble, survminer, lubridate, formatR, gridExtra, ggsurvfit, gtsummary, tidycmprsk, install = FALSE)
# Chunk 3: colors
# Define the desired order of the treatments
strains <- c("194", "200", "204", "205", "215", "216", "220", "221", "227", "228", "B728a", "Cit7", "pisi", "Control")
# Convert the strain variable to a factor with the specified order
pseud_epi_growth_2024summer_R$strain <- factor(pseud_epi_growth_2024summer_R$strain, levels = strains)
# Extract the default ggplot colors
default_colors <- scales::hue_pal()(length(strains) - 1)
# Create a named vector for strain colors, ensuring "Control" is black
strain_colors <- setNames(c(default_colors, "black"), strains)
# Load species colors
species_colors <- c(
"P. fluorescens" = "dodgerblue2",
"P. syringae" = "springgreen3",
"P. paralactis" = "sienna4")
# Chunk 4: load-data
pseud_epi_growth_2024summer_R <- read_excel("data/pseud_epi_growth_2024summer_R.xlsx")
# Define the desired order of the treatments
desired_order <- c("194", "200", "204", "205", "215", "216", "220", "221", "227", "228", "B728a", "Cit7", "pisi", "Control")
# Convert the treatment variable to a factor with the specified order
pseud_epi_growth_2024summer_R$strain <- factor(pseud_epi_growth_2024summer_R$strain, levels = desired_order)
aphid_virulence_data <- read_csv("data/virulence_new_all.csv")
# Convert the treatment variable to a factor with the specified order
aphid_virulence_data$treatment <- factor(aphid_virulence_data$treatment, levels = desired_order)
# Chunk 5: test-survival
# Fit the survival model
km_fit <- survfit(Surv(time, censored) ~ treatment, data = aphid_virulence_data)
# Extract survival probabilities at specific time points
time_points <- c(24, 48, 72)
km_summary <- summary(km_fit, times = time_points)
# Initialize empty lists to store the results
times_list <- list()
treatment_list <- list()
surv_prob_list <- list()
# Loop over each treatment group and extract survival probabilities at specified time points
for (i in 1:length(km_fit$strata)) {
treatment_name <- names(km_fit$strata)[i]
for (t in time_points) {
idx <- which(km_summary$time == t & km_summary$strata == treatment_name)
if (length(idx) > 0) {
times_list <- c(times_list, t)
treatment_list <- c(treatment_list, treatment_name)
surv_prob_list <- c(surv_prob_list, km_summary$surv[idx])
} else {
times_list <- c(times_list, t)
treatment_list <- c(treatment_list, treatment_name)
surv_prob_list <- c(surv_prob_list, NA)
}
}
}
# Create the data frame
surv_probs <- data.frame(
time = unlist(times_list),
treatment = unlist(treatment_list),
surv_prob = unlist(surv_prob_list)
)
# Replace "treatment=" with an empty string
surv_probs$treatment <- gsub("treatment=", "", surv_probs$treatment)
# Print the data frame
print(surv_probs)
# subset data by time
surv_probs_72 <- surv_probs %>% filter(time == 72)
# Convert the treatment variable to a factor with the specified order
surv_probs_72$treatment <- factor(surv_probs_72$treatment, levels = desired_order)
# If you need to save it to a file, you can use the following command
# write.csv(surv_probs, "survival_probabilities.csv", row.names = FALSE)
# Chunk 6: post-hoc
# Perform pairwise log-rank tests between treatment groups and the control group
pairwise_tests <- pairwise_survdiff(Surv(time, censored) ~ treatment, data = aphid_virulence_data)
# Print the pairwise tests
print(pairwise_tests)
# Chunk 7: surival-barplot
surv_plot_72 <- ggplot(data = surv_probs_72, aes(x = treatment, y = (1-surv_prob), color = treatment, fill = treatment)) +
geom_col() +
labs(title = "72 hours",
x = "-80 Strain #",
y = "Aphid Mortality at 72 Hours (%)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
scale_fill_manual(values = strain_colors) +
scale_color_manual(values = strain_colors)
surv_plot_72
# Chunk 8: Kaplan-Meier
survfit2(Surv(time, censored) ~ treatment, data = aphid_virulence_data) %>%
ggsurvfit() +
labs(
x = "Hours",
y = "Overall survival probability"
)
# Chunk 9: mean-epi-growth
# Replace NA with a lower value or remove them for visualization
# Remove rows with NA in CFU_per_10_leafdiscs
epi_growth_clean <- pseud_epi_growth_2024summer_R %>%
filter(!is.na(CFU_per_10_leafdiscs))
# Convert CFU_per_10_leafdiscs to numeric, handling scientific notation
epi_growth_clean$CFU_per_10_leafdiscs <- as.numeric(gsub("<", "", epi_growth_clean$CFU_per_10_leafdiscs))
# Subset data to remove unfinished strains and extract the letter part from the 'plant_rep' column
epi_growth_clean <- epi_growth_clean %>%
mutate(plant_rep_letter = substr(plant_rep, 1, 1))
# Calculate the mean and SD CFU per strain for each plant rep letter and retain the specified columns
epi_growth_mean_per_rep <- epi_growth_clean %>%
group_by(strain, plant_rep_letter) %>%
summarise(
mean_CFU_per_10_leafdiscs = mean(CFU_per_10_leafdiscs, na.rm = TRUE),
sd_CFU = sd(CFU_per_10_leafdiscs, na.rm = TRUE),
sample = first(sample),
person = first(person),
block = first(block),
species = first(species),
plant_rep = first(plant_rep),
.groups = 'drop'
)
# Calculate the mean and SD CFU per strain for each plant rep letter and retain the specified columns
epi_growth_mean_per_strain <- epi_growth_clean %>%
group_by(strain) %>%
summarise(
mean_CFU_per_10_leafdiscs = mean(CFU_per_10_leafdiscs, na.rm = TRUE),
sd_CFU = sd(CFU_per_10_leafdiscs, na.rm = TRUE),
sample = first(sample),
person = first(person),
block = first(block),
species = first(species),
plant_rep = first(plant_rep),
.groups = 'drop'
)
epi_growth_mean_per_strain
# Chunk 10: epi-growth
epi_growth_strain <- ggplot(data = epi_growth_mean_per_rep, aes(x = strain, y = mean_CFU_per_10_leafdiscs, color = strain, fill = strain)) +
geom_boxplot(outlier.shape = NA, alpha = 0.3) +
geom_beeswarm(stroke = 0.5, size = 0.8, alpha = 0.8) +
labs(title = "CFU per 10 Leaf Discs Across Samples",
x = "-80 Strain #",
y = "CFU per 10 Leaf Discs (Log10 Transformed)") +
theme_minimal() +
scale_y_log10() +  # Apply log transformation to y-axis
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
epi_growth_strain
# Chunk 11: epi-growth-stats
epi_growth_mod = lm(mean_CFU_per_10_leafdiscs ~ strain, data = epi_growth_mean_per_rep)
emmeans(epi_growth_mod, pairwise ~ strain)
hist(resid(epi_growth_mod))
# Chunk 12: combine-epi-virulence
# Assuming strain_stats has a column 'strain' and surv_probs has a column 'treatment'
# Rename columns if necessary to match the key for joining
epi_growth_mean_per_strain <- epi_growth_mean_per_strain %>% rename(treatment = strain)
# Combine strain_stats and surv_probs using left_join
epi_virulence_data <- left_join(epi_growth_mean_per_strain, surv_probs, by = "treatment")
# Print the combined data
print(epi_virulence_data)
subset_data_72 <- epi_virulence_data %>% filter(time == 72)
# Calculate correlation coefficient between survival probability and epiphytic growth ability
correlation_72 <- -1*cor(subset_data_72$surv_prob, subset_data_72$mean_CFU_per_10_leafdiscs, method = "pearson")
# Create scatter plot for 72 hours
epi_virulence_plot_strains <- ggplot(subset_data_72, aes(x = mean_CFU_per_10_leafdiscs, y = 1-surv_prob)) +
geom_point(aes(color = treatment, shape = species)) +
geom_smooth(method = "lm", se = TRUE, color = "black", fill = "black", alpha = 0.15, linewidth = 0.5) +
labs(title = "72 Hours",
x = "Mean CFU per 10 Leaf Discs (Log Transformed)",
y = "Aphid Mortality at 72 Hours (%)",
caption = paste("Pearson's Correlation Coefficient:", round(correlation_72, 2))) +
scale_x_continuous(trans = "log10") +  # Apply log transformation to x-axis
theme_minimal()
epi_virulence_plot_strains
survfit2(Surv(time, censored) ~ treatment, data = aphid_virulence_data) %>%
ggsurvfit() +
labs(
x = "Hours",
y = "Overall survival probability"
) +
scale_fill_manual(values = strain_colors) +
scale_color_manual(values = strain_colors)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, tidy.opts = list, tidy = TRUE, fig.align = "center", # Always relative to the document directory
fig.path = "../figures/", # Send any figures to this folder
dev = "png",  # Export figures as PNG
dpi = 300)  # Set the resolution to 300 dots per inch (dpi)
# Chunk 2: load-packages
pacman::p_load(ggplot2, readxl, RColorBrewer, paletteer, viridis, wesanderson, ggbeeswarm, dplyr, tidyverse, devtools, emmeans, cowplot, knitr, survival, here, tibble, survminer, lubridate, formatR, gridExtra, ggsurvfit, gtsummary, tidycmprsk, install = FALSE)
# Chunk 3: load-data
pseud_epi_growth_2024summer_R <- read_excel("data/pseud_epi_growth_2024summer_R.xlsx")
# Define the desired order of the treatments
desired_order <- c("194", "200", "204", "205", "215", "216", "220", "221", "227", "228", "B728a", "Cit7", "pisi", "Control")
# Convert the treatment variable to a factor with the specified order
pseud_epi_growth_2024summer_R$strain <- factor(pseud_epi_growth_2024summer_R$strain, levels = desired_order)
aphid_virulence_data <- read_csv("data/virulence_new_all.csv")
# Convert the treatment variable to a factor with the specified order
aphid_virulence_data$treatment <- factor(aphid_virulence_data$treatment, levels = desired_order)
# Chunk 4: colors
# Define the desired order of the treatments
strains <- c("194", "200", "204", "205", "215", "216", "220", "221", "227", "228", "B728a", "Cit7", "pisi", "Control")
# Convert the strain variable to a factor with the specified order
pseud_epi_growth_2024summer_R$strain <- factor(pseud_epi_growth_2024summer_R$strain, levels = strains)
# Extract the default ggplot colors
default_colors <- scales::hue_pal()(length(strains) - 1)
# Create a named vector for strain colors, ensuring "Control" is black
strain_colors <- setNames(c(default_colors, "black"), strains)
# Load species colors
species_colors <- c(
"P. fluorescens" = "dodgerblue2",
"P. syringae" = "springgreen3",
"P. paralactis" = "sienna4")
# Chunk 5: test-survival
# Fit the survival model
km_fit <- survfit(Surv(time, censored) ~ treatment, data = aphid_virulence_data)
# Extract survival probabilities at specific time points
time_points <- c(24, 48, 72)
km_summary <- summary(km_fit, times = time_points)
# Initialize empty lists to store the results
times_list <- list()
treatment_list <- list()
surv_prob_list <- list()
# Loop over each treatment group and extract survival probabilities at specified time points
for (i in 1:length(km_fit$strata)) {
treatment_name <- names(km_fit$strata)[i]
for (t in time_points) {
idx <- which(km_summary$time == t & km_summary$strata == treatment_name)
if (length(idx) > 0) {
times_list <- c(times_list, t)
treatment_list <- c(treatment_list, treatment_name)
surv_prob_list <- c(surv_prob_list, km_summary$surv[idx])
} else {
times_list <- c(times_list, t)
treatment_list <- c(treatment_list, treatment_name)
surv_prob_list <- c(surv_prob_list, NA)
}
}
}
# Create the data frame
surv_probs <- data.frame(
time = unlist(times_list),
treatment = unlist(treatment_list),
surv_prob = unlist(surv_prob_list)
)
# Replace "treatment=" with an empty string
surv_probs$treatment <- gsub("treatment=", "", surv_probs$treatment)
# Print the data frame
print(surv_probs)
# subset data by time
surv_probs_72 <- surv_probs %>% filter(time == 72)
# Convert the treatment variable to a factor with the specified order
surv_probs_72$treatment <- factor(surv_probs_72$treatment, levels = desired_order)
# If you need to save it to a file, you can use the following command
# write.csv(surv_probs, "survival_probabilities.csv", row.names = FALSE)
# Chunk 6: post-hoc
# Perform pairwise log-rank tests between treatment groups and the control group
pairwise_tests <- pairwise_survdiff(Surv(time, censored) ~ treatment, data = aphid_virulence_data)
# Print the pairwise tests
print(pairwise_tests)
# Chunk 7: surival-barplot
surv_plot_72 <- ggplot(data = surv_probs_72, aes(x = treatment, y = (1-surv_prob), color = treatment, fill = treatment)) +
geom_col() +
labs(title = "72 hours",
x = "-80 Strain #",
y = "Aphid Mortality at 72 Hours (%)") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none") +
scale_fill_manual(values = strain_colors) +
scale_color_manual(values = strain_colors)
surv_plot_72
survfit2(Surv(time, censored) ~ treatment, data = aphid_virulence_data) %>%
ggsurvfit() +
labs(
x = "Hours",
y = "Overall survival probability"
) +
scale_fill_manual(values = strain_colors) +
scale_color_manual(values = strain_colors)
