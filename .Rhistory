)
# Calculate the mean and SD CFU per strain for each plant rep letter and retain the specified columns
epi_growth_mean_per_strain <- epi_growth_clean %>%
group_by(treatment) %>%
summarise(
CFU_per_10_leafdiscs_log_10 = mean(CFU_per_10_leafdiscs_log_10, na.rm = TRUE),
sd_CFU = sd(CFU_per_10_leafdiscs_log_10, na.rm = TRUE),
sample = first(sample),
person = first(person),
species_complex = first(species_complex),
block = first(block),
treatment = first(treatment),
plant_rep = first(plant_rep),
.groups = 'drop'
)
epi_growth_mean_per_strain
# Chunk 11: epi-growth
# plot by treatment
epi_growth_treatment <- ggplot(data = epi_growth_mean_per_rep,
aes(x = treatment,
y = CFU_per_10_leafdiscs_log_10,
color = species_complex,
fill = species_complex)) +
geom_boxplot(outlier.shape = NA, alpha = 0.3) +
geom_beeswarm(stroke = 0.5, size = 0.8, alpha = 0.8) +
theme_minimal() +
coord_flip() +
scale_fill_manual(values = species_colors) +
scale_color_manual(values = species_colors) +
scale_y_continuous(limits = c(2.5, 5.5)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
# plot by species complex
epi_growth_species <- ggplot(data = epi_growth_mean_per_rep,
aes(x = species_complex,
y = CFU_per_10_leafdiscs_log_10,
color = species_complex,
fill = species_complex)) +
geom_boxplot(outlier.shape = NA, alpha = 0.3) +
geom_beeswarm(stroke = 0.5, size = 0.8, alpha = 0.8) +
theme_minimal() +
scale_fill_manual(values = species_colors) +
scale_color_manual(values = species_colors) +
scale_y_continuous(limits = c(2.5, 5.5)) +
theme(plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom")
# show plots
epi_growth_treatment
epi_growth_species
# Chunk 12: epi-growth-stats
# stats per treatment
epi_growth_mod_treatment = lm(CFU_per_10_leafdiscs_log_10 ~ treatment, data = epi_growth_mean_per_rep)
emmeans(epi_growth_mod_treatment, pairwise ~ treatment)
hist(resid(epi_growth_mod_treatment))
# stats per species
epi_growth_mod_species = lm(CFU_per_10_leafdiscs_log_10 ~ species_complex, data = epi_growth_mean_per_rep)
emmeans(epi_growth_mod_species, pairwise ~ species_complex)
hist(resid(epi_growth_mod_species))
# Chunk 13: combine-epi-virulence
# Combine strain_stats and surv_probs using left_join
epi_virulence_data <- left_join(epi_growth_mean_per_strain, surv_probs, by = "treatment")
# Print the combined data
print(epi_virulence_data)
# Calculate correlation coefficient between survival probability and epiphytic growth ability
correlation <- -1*cor(epi_virulence_data$surv_prob, epi_virulence_data$CFU_per_10_leafdiscs_log_10, method = "pearson")
# Chunk 14: epi-virulence-plot
# Create scatter plot for 72 hours
epi_virulence_plot_strains <- ggplot(epi_virulence_data, aes(x = CFU_per_10_leafdiscs_log_10, y = 1-surv_prob)) +
geom_point(aes(color = species_complex.y)) +
geom_smooth(method = "lm", se = TRUE, color = "black", fill = "black", alpha = 0.15, linewidth = 0.5) +
labs(x = "Mean CFU per 10 Leaf Discs (Log Transformed)",
y = "Aphid Mortality at 72 Hours (%)",
caption = paste("Pearson's Correlation Coefficient:", round(correlation, 2))) +
scale_x_continuous(limits = c(2.5, 5.5)) +
scale_fill_manual(values = species_colors) +
scale_color_manual(values = species_colors) +
theme_minimal()
epi_virulence_plot_strains
# Load the tree from the .contree file
tree <- read.tree("tree/EpiVir_IQTree_2024july9/EpiVir_16S.contree")
midpoint_tree <- midpoint(tree)
# Calculate the maximum x value with a buffer for labels
max_x <- max(midpoint_tree$edge.length) + 1
# Adjust the horizontal scale (increase max_x to give more space for labels)
adjusted_max_x <- max_x * 1.5  # Adjust this multiplier as needed
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
xlim(0, adjusted_max_x) +  # Set the x-axis limits manually
theme(aspect.ratio = 1) +
theme(plot.margin = unit(c(1, 4, 1, 1), "lines"))  # Increase the right margin
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
xlim(0, adjusted_max_x) +  # Set the x-axis limits manually
theme(aspect.ratio = 1) +
theme(plot.margin = unit(c(1, 4, 1, 1), "lines"))  # Increase the right margin
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
xlim(0, adjusted_max_x) +  # Set the x-axis limits manually
theme(aspect.ratio = 1)
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
#xlim(0, adjusted_max_x) +  # Set the x-axis limits manually
theme(aspect.ratio = 1)
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
#xlim(0, adjusted_max_x) +  # Set the x-axis limits manually
theme(aspect.ratio = 1)
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(hjust = .1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
#xlim(0, adjusted_max_x) +  # Set the x-axis limits manually
theme(aspect.ratio = 1)
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(hjust = .1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
xlim(0, adjusted_max_x) +  # Set the x-axis limits manually
theme(aspect.ratio = 1)
#
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(hjust = .1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
theme(aspect.ratio = 1)
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(hjust = .1, linesize = 0.5) +
geom_tippoint() +
theme(aspect.ratio = 1)
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(hjust = .1, linesize = 0.5, size = 3) +
geom_tippoint() +
theme(aspect.ratio = 1)
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(linesize = 0.5, size = 3) +
geom_tippoint() +
theme(aspect.ratio = 1)
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(hjust = -.3, linesize = 0.5, size = 3) +
geom_tippoint() +
theme(aspect.ratio = 1)
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(hjust = -.3, linesize = 0.5, size = 3) +
geom_tippoint() +
theme(aspect.ratio = 4)
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(hjust = -.3, linesize = 0.5, size = 3) +
geom_tippoint() +
theme(aspect.ratio = 1/4)
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(hjust = -.3, linesize = 0.5, size = 3) +
geom_tippoint() +
theme(aspect.ratio = 1/2)
# Plot the tree with adjusted horizontal scale
ggtree(midpoint_tree) +
geom_tiplab(align = TRUE, hjust = -.3, linesize = 0.5, size = 3) +
geom_tippoint() +
theme(aspect.ratio = 1/2)
# Apply a scaling factor to shorten the branch lengths
scaling_factor <- 0.5  # Adjust this value as needed (0.5 means half the original length)
midpoint_tree$edge.length <- midpoint_tree$edge.length * scaling_factor
# Calculate the maximum x value with a buffer for labels
max_x <- max(midpoint_tree$edge.length) + 1
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
theme(aspect.ratio = 1) +
theme(plot.margin = unit(c(1, 4, 1, 1), "lines"))
# Apply a scaling factor to shorten the branch lengths
scaling_factor <- 0.5  # Adjust this value as needed (0.5 means half the original length)
midpoint_tree$edge.length <- midpoint_tree$edge.length * scaling_factor
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
theme(aspect.ratio = 1)
# Load the tree from the .contree file
tree <- read.tree("tree/EpiVir_IQTree_2024july9/EpiVir_16S.contree")
midpoint_tree <- midpoint(tree)
# Apply a scaling factor to shorten the branch lengths
scaling_factor <- 0.5  # Adjust this value as needed (0.5 means half the original length)
midpoint_tree$edge.length <- midpoint_tree$edge.length * scaling_factor
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
theme(aspect.ratio = 1)
# Apply a scaling factor to shorten the branch lengths
scaling_factor <- 0.1  # Adjust this value as needed (0.5 means half the original length)
midpoint_tree$edge.length <- midpoint_tree$edge.length * scaling_factor
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
theme(aspect.ratio = 1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size =3, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
theme(aspect.ratio = 1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 4, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
theme(aspect.ratio = 1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
theme(aspect.ratio = 1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
theme(aspect.ratio = 1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree * scaling_factor) +
geom_tiplab(size = 3, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Apply a scaling factor to shorten the branch lengths
scaling_factor <- 0.1  # Adjust this value as needed (0.5 means half the original length)
midpoint_tree$edge.length <- midpoint_tree$edge.length * scaling_factor
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Apply a scaling factor to shorten the branch lengths
scaling_factor <- 0.01  # Adjust this value as needed (0.5 means half the original length)
midpoint_tree$edge.length <- midpoint_tree$edge.length * scaling_factor
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Shorten branch lengths by setting a maximum branch length
max_branch_length <- 0.5  # Adjust this value to set the maximum branch length
midpoint_tree$edge.length <- pmin(midpoint_tree$edge.length, max_branch_length)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
xlim(0, max(midpoint_tree$edge.length) + 1) +  # Set x-axis limits to fit labels
theme(aspect.ratio = 1) +
theme(plot.margin = unit(c(1, 4, 1, 1), "lines"))  # Increase the right margin
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
xlim(0, max(midpoint_tree$edge.length) + 1) +  # Set x-axis limits to fit labels
theme(aspect.ratio = 1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
xlim(0, max(midpoint_tree$edge.length) + 1) # Set x-axis limits to fit labels
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Shorten branch lengths by setting a maximum branch length
max_branch_length <- 0.5  # Adjust this value to set the maximum branch length
midpoint_tree$edge.length <- pmin(midpoint_tree$edge.length, max_branch_length)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Shorten branch lengths by setting a maximum branch length
max_branch_length <- 0.1  # Adjust this value to set the maximum branch length
midpoint_tree$edge.length <- pmin(midpoint_tree$edge.length, max_branch_length)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 10, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 10, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
```
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 10, hjust = -1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 10, hjust = -1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
```
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 10, hjust = -0.1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Function to calculate the maximum label length in plot units
calculate_label_length <- function(labels, fontsize = 3) {
max_label_length <- max(nchar(labels))
# Estimate the width required for the longest label
max_label_length * fontsize * 0.4
}
# Read your tree file (replace 'your_tree_file' with the actual file name)
tree <- read.tree("your_tree_file")
# Function to calculate the maximum label length in plot units
calculate_label_length <- function(labels, fontsize = 3) {
max_label_length <- max(nchar(labels))
# Estimate the width required for the longest label
max_label_length * fontsize * 0.4
}
# Root the tree at the midpoint
midpoint_tree <- midpoint(tree)
# Shorten branch lengths by setting a maximum branch length
max_branch_length <- 0.5  # Adjust this value to set the maximum branch length
midpoint_tree$edge.length <- pmin(midpoint_tree$edge.length, max_branch_length)
# Calculate the required x-axis limit
longest_label_length <- calculate_label_length(midpoint_tree$tip.label)
x_limit <- max(midpoint_tree$edge.length) + longest_label_length
# Plot the tree with adjusted branch lengths and x-axis limits
p <- ggtree(midpoint_tree) +
geom_tiplab(angle = 45, hjust = 1, vjust = 0.5, linesize = 0.5) +
geom_tippoint() +
xlim(0, x_limit) +  # Set x-axis limits to fit labels
theme(aspect.ratio = 1) +
theme(plot.margin = unit(c(1, 4, 1, 1), "lines"))  # Increase the right margin
print(p)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
MRCA(midpoint_tree, tip=c("220", "200"))
MRCA(tree, tip=c("220", "200"))
# Load the tree from the .contree file
tree <- read.tree("tree/EpiVir_IQTree_2024july9/EpiVir_16S.treefile")
midpoint_tree <- midpoint(tree)
# Shorten branch lengths by setting a maximum branch length
max_branch_length <- 0.1  # Adjust this value to set the maximum branch length
midpoint_tree$edge.length <- pmin(midpoint_tree$edge.length, max_branch_length)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5, linesize = 0.5) +
geom_tippoint()
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5, linesize = 0.1) +
geom_tippoint()
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5, linesize = 3) +
geom_tippoint()
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint()
xlim(1990, 2020)
xlim(0, 2020)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 2020)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 10)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.01)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.09)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.07)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.05)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.09)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.075)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.08)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.9)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.09)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, angle = 20, hjust = -0.05, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, angle = 20, hjust = -0.01, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, angle = 20, hjust = -0.05, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, angle = 20, hjust = -0.1, vjust = 0.5) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, angle = 20, hjust = -0.1) +
geom_tippoint() +
xlim(0, 0.1)
# Plot the tree with adjusted branch lengths
ggtree(midpoint_tree) +
geom_tiplab(size = 3, hjust = -0.1) +
geom_tippoint() +
xlim(0, 0.1)
knitr::opts_chunk$set(echo = TRUE, tidy.opts = list, tidy = TRUE, fig.align = "center", fig.height = 5,
fig.path = "../figures/", # Send any figures to this folder
dev = "png",  # Export figures as PNG
dpi = 300) # Set the resolution to 300 dots per inch (dpi)
knit_with_parameters("~/Desktop/Cornell/Hendry Lab/pseud_epi_growth/analysis/epi_vir_analysis.Rmd")
